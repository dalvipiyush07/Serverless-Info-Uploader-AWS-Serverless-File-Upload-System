import json
import boto3
import os
import uuid
import base64

# Initialize AWS clients
s3_client = boto3.client('s3')
dynamodb = boto3.resource('dynamodb')

# Set your specific bucket and table names
BUCKET_NAME = 'thala0707'
TABLE_NAME = 'lambda'
table = dynamodb.Table(TABLE_NAME)

def lambda_handler(event, context):
    # Handle GET request - show upload form
    if event['requestContext']['http']['method'] == 'GET':
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'text/html',
                'Access-Control-Allow-Origin': '*'
            },
            'body': show_upload_form()
        }
    
    # Handle POST request - process file upload
    elif event['requestContext']['http']['method'] == 'POST':
        try:
            # Parse the multipart form data
            content_type = event['headers'].get('content-type', event['headers'].get('Content-Type', ''))
            if 'multipart/form-data' not in content_type:
                return {
                    'statusCode': 400,
                    'headers': {
                        'Access-Control-Allow-Origin': '*'
                    },
                    'body': json.dumps({'error': 'Invalid content type. Expected multipart/form-data'})
                }
            
            # Parse the body (base64 encoded if isBase64Encoded is true)
            body = event['body']
            if event.get('isBase64Encoded', False):
                body = base64.b64decode(body)
            else:
                body = body.encode('utf-8')
            
            # Parse multipart form data
            boundary = content_type.split("boundary=")[1].encode('utf-8')
            parts = body.split(b'--' + boundary)
            
            file_data = None
            filename = None
            description = None
            
            for part in parts:
                if b'Content-Disposition: form-data;' in part:
                    header_end = part.find(b'\r\n\r\n')
                    if header_end == -1:
                        continue
                    
                    headers = part[:header_end].decode('utf-8')
                    content = part[header_end+4:].rstrip(b'\r\n')
                    
                    if 'name="file"' in headers and 'filename="' in headers:
                        # Extract filename
                        filename_start = headers.find('filename="') + 10
                        filename_end = headers.find('"', filename_start)
                        filename = headers[filename_start:filename_end]
                        file_data = content
                    
                    elif 'name="description"' in headers:
                        description = content.decode('utf-8').strip()
            
            if not filename or not file_data:
                return {
                    'statusCode': 400,
                    'headers': {
                        'Access-Control-Allow-Origin': '*'
                    },
                    'body': json.dumps({'error': 'File not found in request'})
                }
            
            # Upload file to S3
            file_id = str(uuid.uuid4())
            file_key = f"uploads/{file_id}_{filename}"
            
            s3_client.put_object(
                Bucket=BUCKET_NAME,
                Key=file_key,
                Body=file_data,
                ContentType='application/octet-stream'
            )
            
            # Generate a presigned URL for the uploaded file
            presigned_url = s3_client.generate_presigned_url(
                'get_object',
                Params={'Bucket': BUCKET_NAME, 'Key': file_key},
                ExpiresIn=3600
            )
            
            # Save metadata to DynamoDB
            table.put_item(
                Item={
                    'id': file_id,
                    'filename': filename,
                    'description': description or '',
                    's3_key': file_key,
                    'upload_date': str(context.aws_request_id),
                    'presigned_url': presigned_url
                }
            )
            
            return {
                'statusCode': 200,
                'headers': {
                    'Content-Type': 'text/html',
                    'Access-Control-Allow-Origin': '*'
                },
                'body': show_success_message(filename, file_id, presigned_url)
            }
            
        except Exception as e:
            return {
                'statusCode': 500,
                'headers': {
                    'Access-Control-Allow-Origin': '*'
                },
                'body': json.dumps({'error': str(e)})
            }
    
    # Handle other methods
    else:
        return {
            'statusCode': 405,
            'headers': {
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'Method not allowed'})
        }

def show_upload_form():
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>File Upload to Thala0707</title>
        <meta charset="UTF-8">
        <style>
            * {
                box-sizing: border-box;
                margin: 0;
                padding: 0;
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            }
            body {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                display: flex;
                justify-content: center;
                align-items: center;
                padding: 20px;
            }
            .container {
                background: white;
                border-radius: 10px;
                box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
                width: 100%;
                max-width: 500px;
                padding: 30px;
            }
            h2 {
                text-align: center;
                color: #333;
                margin-bottom: 20px;
                font-weight: 600;
            }
            .logo {
                text-align: center;
                font-size: 24px;
                font-weight: bold;
                color: #667eea;
                margin-bottom: 20px;
            }
            .form-group {
                margin-bottom: 20px;
            }
            label {
                display: block;
                margin-bottom: 8px;
                color: #555;
                font-weight: 500;
            }
            input[type="text"], input[type="file"] {
                width: 100%;
                padding: 12px 15px;
                border: 1px solid #ddd;
                border-radius: 5px;
                font-size: 16px;
                transition: border-color 0.3s;
            }
            input[type="text"]:focus, input[type="file"]:focus {
                border-color: #667eea;
                outline: none;
            }
            button {
                width: 100%;
                padding: 12px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border: none;
                border-radius: 5px;
                font-size: 16px;
                cursor: pointer;
                transition: transform 0.3s, box-shadow 0.3s;
                font-weight: 600;
            }
            button:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            }
            .instructions {
                background: #f8f9fa;
                padding: 15px;
                border-radius: 5px;
                margin-top: 25px;
                font-size: 14px;
                color: #666;
            }
            .instructions h3 {
                margin-bottom: 10px;
                color: #333;
            }
            .instructions ul {
                padding-left: 20px;
            }
            .instructions li {
                margin-bottom: 5px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="logo">Thala0707 Uploader</div>
            <h2>Upload a File to AWS S3</h2>
            <form method="POST" enctype="multipart/form-data">
                <div class="form-group">
                    <label for="description">Description:</label>
                    <input type="text" id="description" name="description" placeholder="Enter file description">
                </div>
                <div class="form-group">
                    <label for="file">Select file to upload:</label>
                    <input type="file" id="file" name="file" required>
                </div>
                <button type="submit">Upload File</button>
            </form>
            
            <div class="instructions">
                <h3>How this works:</h3>
                <ul>
                    <li>Files are uploaded to S3 bucket: thala0707</li>
                    <li>File metadata is stored in DynamoDB table: lambda</li>
                    <li>You'll get a temporary download link after upload</li>
                    <li>The link expires after 1 hour for security</li>
                </ul>
            </div>
        </div>
    </body>
    </html>
    """

def show_success_message(filename, file_id, presigned_url):
    return f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Upload Successful</title>
        <meta charset="UTF-8">
        <style>
            * {{
                box-sizing: border-box;
                margin: 0;
                padding: 0;
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            }}
            body {{
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                display: flex;
                justify-content: center;
                align-items: center;
                padding: 20px;
            }}
            .container {{
                background: white;
                border-radius: 10px;
                box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
                width: 100%;
                max-width: 600px;
                padding: 30px;
                text-align: center;
            }}
            h2 {{
                color: #4CAF50;
                margin-bottom: 20px;
                font-weight: 600;
            }}
            .logo {{
                text-align: center;
                font-size: 24px;
                font-weight: bold;
                color: #667eea;
                margin-bottom: 20px;
            }}
            .success-icon {{
                font-size: 60px;
                color: #4CAF50;
                margin-bottom: 20px;
            }}
            .details {{
                text-align: left;
                background: #f8f9fa;
                padding: 20px;
                border-radius: 5px;
                margin: 20px 0;
            }}
            .details p {{
                margin-bottom: 10px;
                word-break: break-all;
            }}
            .details strong {{
                color: #333;
            }}
            a.download-btn {{
                display: inline-block;
                padding: 12px 25px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                text-decoration: none;
                border-radius: 5px;
                font-weight: 600;
                margin: 10px 0;
                transition: transform 0.3s, box-shadow 0.3s;
            }}
            a.download-btn:hover {{
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            }}
            a.upload-another {{
                display: inline-block;
                margin-top: 15px;
                color: #667eea;
                text-decoration: none;
                font-weight: 500;
            }}
            a.upload-another:hover {{
                text-decoration: underline;
            }}
            .note {{
                margin-top: 20px;
                padding: 15px;
                background: #fff3cd;
                border-left: 4px solid #ffc107;
                color: #856404;
                text-align: left;
                border-radius: 4px;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="logo">Thala0707 Uploader</div>
            <div class="success-icon">✓</div>
            <h2>File Uploaded Successfully!</h2>
            
            <div class="details">
                <p><strong>Filename:</strong> {filename}</p>
                <p><strong>File ID:</strong> {file_id}</p>
                <p><strong>Download URL:</strong> <a href="{presigned_url}" target="_blank">Click to download</a></p>
            </div>
            
            <a href="{presigned_url}" class="download-btn" target="_blank">Download File</a>
            <br>
            <a href="/" class="upload-another">Upload Another File</a>
            
            <div class="note">
                <strong>Note:</strong> This download link will expire in 1 hour.
                For permanent access, you would need to implement a different approach.
            </div>
        </div>
    </body>
    </html>
    """

# For local testing
if __name__ == "__main__":
    # Mock event for testing
    test_event = {
        'requestContext': {
            'http': {
                'method': 'GET'
            }
        },
        'headers': {}
    }
    
    # Test the function
    result = lambda_handler(test_event, None)
    print("Status Code:", result['statusCode'])
    print("Headers:", result['headers'])
    print("Body length:", len(result['body']))
